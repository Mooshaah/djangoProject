
Same functionality for views.py with diffrent implementation

'''
class Article_View_Set(viewsets.GenericViewSet, mixins.ListModelMixin, mixins.CreateModelMixin,
                       mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin):
    queryset = Article.objects.all()
    serializer_class = Article_serializer
'''
# This is the start of a new. Diffrent ways to get the same output
'''
class Article_View_Set(viewsets.GenericViewSet, mixins.ListModelMixin):
    queryset = Article.objects.all()
    serializer_class = Article_serializer

    def list(self, req):
        articles = Article.objects.all()
        serializer = Article_serializer(articles, many=True)
        return Response(serializer.data)

    def retrieve(self, req, pk=None):
        queryset = Article.objects.all()
        article = get_object_or_404(queryset, pk=pk)
        serializer = Article_serializer(article)
        return Response(serializer.data)

    def create(self, req):
        serializer = Article_serializer(data= req.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    def update(self, req, pk =None):
        article = Article.objects.get(pk=pk)
        serializer = Article_serializer(article, data=req.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def destroy(self, req, pk=None):
        article = Article.objects.get(pk=pk)
        article.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)
'''  # This is the end of the multiline comment


# This is a new multi line comment
'''
class ArticleList(generics.GenericAPIView, mixins.ListModelMixin, mixins.CreateModelMixin):
    queryset = Article.objects.all()
    serializer_class = Article_serializer

    def get(self, req):
        return self.list(req)

    def post(self, req):
        return self.create(req)

class Article_Details(generics.GenericAPIView,mixins.RetrieveModelMixin, mixins.UpdateModelMixin,
                      mixins.DestroyModelMixin):
    queryset = Article.objects.all()
    serializer_class = Article_serializer
    lookup_field = 'id'

    def get(self, req, id):
        return self.retrieve(req, id=id)

    def put(self, req, id):
        return self.update(req, id=id)

    def delete(self, req, id):
        return self.destroy(req, id=id)
   '''

'''
@api_view(['GET', 'POST'])
def article_list(req):
    if req.method == 'GET':
        articles = Article.objects.all()
        serializer = Article_serializer(articles, many= True)
        return Response(serializer.data)

    elif req.method == 'POST':
        serializer = Article_serializer( data= req.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status= status.HTTP_201_CREATED)
        return Response(serializer.errors, status= status.HTTP_400_BAD_REQUEST)

@api_view(['GET', 'PUT', 'DELETE'])
def article_details(req, pk):
    try:
        article = Article.objects.get(pk=pk)
    except Article.DoesNotExist:
        return Response(status= status.HTTP_404_NOT_FOUND)

    if req.method == 'GET':
        serializer = Article_serializer(article)
        return Response(serializer.data)

    elif req.method == 'PUT':
        serializer = Article_serializer(data= req.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status= status.HTTP_400_BAD_REQUEST)

    elif req.method == 'DELETE':
        article.delete()
        return Response(status= status.HTTP_204_NO_CONTENT)
'''